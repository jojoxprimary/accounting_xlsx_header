import io
import logging

from PIL import ImageFont
from markupsafe import Markup
from datetime import datetime,date

from odoo import models, _
from odoo.tools import SQL
from odoo.tools.misc import xlsxwriter, file_path
from collections import defaultdict

_logger = logging.getLogger(__name__)

XLSX_GRAY_200 = '#EEEEEE'
XLSX_BORDER_COLOR = '#B4B4B4'
XLSX_FONT_SIZE_DEFAULT = 8
XLSX_FONT_SIZE_HEADING = 11

class JournalReportCustomHandler(models.AbstractModel):
    _inherit = "account.journal.report.handler"

    def export_to_xlsx(self, options, response=None):
        """
        Overrides the default XLSX Generation from account.repor to use a custom one.
        """
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {
            'in_memory': True,
            'strings_to_formulas': False,
        })
        report = self.env['account.report'].search([('id', '=', options['report_id'])], limit=1)
        print_options = report.get_options(previous_options={**options, 'export_mode': 'print'})
        document_data = self._generate_document_data_for_export(report, print_options, 'xlsx')

        # We need to use fonts to calculate column width otherwise column width would be ugly
        # Using Lato as reference font is a hack and is not recommended. Customer computers don't have this font by default and so
        # the generated xlsx wouldn't have this font. Since it is not by default, we preferred using Arial font as default and keep
        # Lato as reference for columns width calculations.
        fonts = {}
        for font_size in (XLSX_FONT_SIZE_HEADING, XLSX_FONT_SIZE_DEFAULT):
            fonts[font_size] = defaultdict()
            for font_type in ('Reg', 'Bol', 'RegIta', 'BolIta'):
                try:
                    lato_path = f'web/static/fonts/lato/Lato-{font_type}-webfont.ttf'
                    fonts[font_size][font_type] = ImageFont.truetype(file_path(lato_path), font_size)
                except (OSError, FileNotFoundError):
                    # This won't give great result, but it will work.
                    fonts[font_size][font_type] = ImageFont.load_default()
        

        for journal_vals in document_data['journals_vals']:
            cursor_x = 0
            cursor_y = 9

            journal_filter = options.get('journal_ids', [])
            if journal_filter:
                journals = self.env['account.journal'].browse(journal_filter)
                
                # Group by type for better display
                journals_by_type = {}
                for journal in journals:
                    if journal.type not in journals_by_type:
                        journals_by_type[journal.type] = []
                    journals_by_type[journal.type].append(journal.name)
                
                # Format the display
                journal_info_lines = []
                for j_type, j_names in journals_by_type.items():
                    journal_info_lines.append(f"{j_type.title()}: {', '.join(j_names)}")
                
                journal_info = "\n".join(journal_info_lines)
            else:
                journal_info = "All Journals (All Types)"

            # Default sheet properties
            sheet = workbook.add_worksheet(journal_vals['name'][:31])
            bold_format = workbook.add_format({'bold': True})
            normal_format = workbook.add_format({}) 
            columns = journal_vals['columns']

             # ==== Custom header ====
            _logger.info("Writing custom header...")
            company = self.env.company
            book_type = options.get('journal_type', '') or options.get('book_type', '') or 'General'
            current_user = self.env.user
            generation_date = datetime.now().strftime("%Y-%m-%d")
            software_info = f"Odoo {self.env.ref('base.module_base').latest_version or 'Unknown Version'}"

           
            sheet.write(0, 0, "Company Name:", bold_format)
            sheet.write(0, 1, company.name, normal_format)
            sheet.write(1, 0, "Book Type:", bold_format)
            sheet.write(1, 1, book_type.title(), normal_format)
            sheet.write(2, 0, "VAT No.:", bold_format)
            sheet.write(2, 1, company.vat or '', normal_format)
            sheet.write(3, 0, "Address:", bold_format)
            sheet.write(3, 1, company.partner_id.contact_address or '', normal_format)
            sheet.write(4, 0, "Period Covered:", bold_format)
            sheet.write(4, 1, options.get('date', {}).get('string', ''), normal_format)
            sheet.write(5, 0, "Software::", bold_format)
            sheet.write(5, 1, software_info, normal_format)
            sheet.write(6, 0, "Generated By:", bold_format)
            sheet.write(6, 1, f"{current_user.name}", normal_format)
            sheet.write(7, 0, f"Generation Date: {generation_date}", bold_format)
            sheet.write(7, 1, f"{generation_date}", normal_format)
            sheet.write(8, 0, "Journal Filter:", bold_format)
            sheet.write(8, 1, journal_info, normal_format)

            # Set column widths for better appearance
            sheet.set_column(0, 0, 15)  # Label column
            sheet.set_column(1, 1, 35)  # Value column

            for column in columns:
                align = 'left'
                if 'o_right_alignment' in column.get('class', ''):
                    align = 'right'
                self._write_cell(cursor_x, cursor_y, column['name'], 1, False, report, fonts, workbook, sheet, XLSX_FONT_SIZE_HEADING,
                                 True, XLSX_GRAY_200, align, 2, 2)
                cursor_x = cursor_x + 1

            # Set cursor coordinates for the table generation
            cursor_y += 1
            cursor_x = 0
            for line in journal_vals['lines'][:-1]:
                is_first_aml_line = False
                for column in columns:
                    border_top = 0 if not is_first_aml_line else 1
                    align = 'left'

                    if line.get(column['label'], {}).get('data'):
                        data = line[column['label']]['data']
                        is_date = isinstance(data, date)
                        bold = False

                        if 'o_right_alignment' in column.get('class', ''):
                            align = 'right'

                        if line[column['label']].get('class') and 'o_bold' in line[column['label']]['class']:
                            # if the cell has bold styling, should only be on the first line of each aml
                            is_first_aml_line = True
                            border_top = 1
                            bold = True

                        self._write_cell(cursor_x, cursor_y, data, 1, is_date, report, fonts, workbook, sheet, XLSX_FONT_SIZE_DEFAULT,
                                         bold, 'white', align, 0, border_top, XLSX_BORDER_COLOR)

                    else:
                        # Empty value
                        self._write_cell(cursor_x, cursor_y, '', 1, False, report, fonts, workbook, sheet, XLSX_FONT_SIZE_DEFAULT, False,
                                         'white', align, 0, border_top, XLSX_BORDER_COLOR)

                    cursor_x += 1
                cursor_x = 0
                cursor_y += 1

            # Draw total line
            total_line = journal_vals['lines'][-1]
            for column in columns:
                data = ''
                align = 'left'

                if total_line.get(column['label'], {}).get('data'):
                    data = total_line[column['label']]['data']

                if 'o_right_alignment' in column.get('class', ''):
                    align = 'right'

                self._write_cell(cursor_x, cursor_y, data, 1, False, report, fonts, workbook, sheet, XLSX_FONT_SIZE_DEFAULT, True,
                                 XLSX_GRAY_200, align, 2, 2)
                cursor_x += 1

            cursor_x = 0

            sheet.set_default_row(20)
            sheet.set_row(0, 30)

            # Tax tables drawing
            if journal_vals.get('tax_summary'):
                self._write_tax_summaries_to_sheet(report, workbook, sheet, fonts, len(columns) + 1, 1, journal_vals['tax_summary'])

        if document_data.get('global_tax_summary'):
            self._write_tax_summaries_to_sheet(
                report,
                workbook,
                workbook.add_worksheet(_('Global Tax Summary')[:31]),
                fonts,
                0,
                0,
                document_data['global_tax_summary']
            )

        workbook.close()
        output.seek(0)
        generated_file = output.read()
        output.close()

        return {
            'file_name': report.get_default_report_filename(options, 'xlsx'),
            'file_content': generated_file,
            'file_type': 'xlsx',
        }
